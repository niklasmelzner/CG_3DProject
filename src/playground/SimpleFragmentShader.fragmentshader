#version 420 core
#define MAX_LIGHTS 5
#define MAX_EFFECTS 5
#define PI 3.1415926538

struct Light{
	int type;
	vec3 pos;
	vec3 color;
	vec4 modifiers;
	vec4 modifiers1;
};
struct Effect{
	int type;
	vec3 value;
};
struct Material {
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

in vec3 color;
in vec3 fragPos;
in vec3 normal;
in vec3 viewPos;
in vec2 uv;
uniform int lightCount;
uniform int effectCount;
uniform float hasTexture;
uniform Effect effects[MAX_EFFECTS];
uniform Light lights[MAX_LIGHTS];
uniform Material material;

uniform sampler2D textureSampler;
// Ouput data

out vec3 colorOut;

void main(){
	
	//https://learnopengl.com/Lighting/Basic-Lighting

	vec3 cd;
	if (hasTexture==1.0){
		cd=texture(textureSampler,uv).rgb;
	} else {
		cd=vec3(1,1,1);
	}

	//ambient
	float ambientStrength = 1.0;
	//vec3 ambient = ambientStrength * ambientLightColor;
	vec3 ambient=material.ambient*ambientStrength;

	//diff
	float diffuseStrength=1.0;
	float specularStrength=1.0;
	vec3 diffuse=vec3(0.0,0.0,0.0);
	vec3 specular=vec3(0.0,0.0,0.0);

	for(int i=0;i<lightCount;i++){
		float strength=0.0;
		if (lights[i].type==0 || lights[i].type==1){
			float l=length(lights[i].pos-fragPos);
			strength=clamp(lights[i].modifiers[0]/(1.0+l+l*l),0.0,1.0);
			if (l < lights[i].modifiers[1]){
				strength = 0.0;
				ambient=ambient+lights[i].color*lights[i].modifiers[2];
			}

			if (lights[i].type==1){
				vec3 d=vec3(lights[i].modifiers1);
				float a=acos(dot(fragPos-lights[i].pos,d)/(l*length(d)));
				if(a>lights[i].modifiers1.w){
					strength=0.0;
				}else{
					strength*=sin((1-a/lights[i].modifiers1.w)*PI*0.5);
				}
			}

			strength*=lights[i].modifiers.w;
		}
		
		
		vec3 lightDir=normalize(lights[i].pos-fragPos);
		float diff=max(dot(normal,lightDir),0.0);
		diff=clamp(diff,0.1,1.0);
		diffuse=diffuse+(diff*material.diffuse*diffuseStrength*strength)*lights[i].color;

		vec3 viewDir=normalize(viewPos-fragPos);
		vec3 reflectDir=reflect(-lightDir,normal);

		float spec=pow(max(dot(viewDir,reflectDir),0.0),32);
		spec=clamp(spec,0.0,1.0);
	
		if (diff==0)spec=0;

		specular=specular+spec*material.specular*specularStrength*strength*lights[i].color;
		
	}
	
	colorOut=diffuse*cd+ambient*cd+specular;

	for(int i=0;i<effectCount;i++){
		if (effects[i].type==0){
			colorOut*=effects[i].value;
		}
	}


}
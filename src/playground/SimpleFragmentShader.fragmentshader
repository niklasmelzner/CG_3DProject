#version 420 core

in vec3 color;
in vec3 fragPos;
in vec3 normal;
in vec3 viewPos;
in vec3 lightPos;
flat in float hasTexture;
in vec3 matAmbient;
in vec3 matDiffuse;
in vec3 matSpecular;
in vec2 uv;

uniform sampler2D textureSampler;
// Ouput data

out vec3 colorOut;

void main(){
	
	vec3 lightColor=vec3(1.0,1.0,1.0);
		
	vec3 cd;
	if (hasTexture==1.0){
		cd=texture(textureSampler,uv).rgb;
	} else {
		cd=vec3(1,1,1);
	}

	//diff
	float diffuseStrength=1.0;
	vec3 lightDir=normalize(lightPos-fragPos);
	float diff=max(dot(normal,lightDir),0.0);
	diff=clamp(diff,0.1,1.0);
	//vec3 diffuse=diff*lightColor*diffuseStrength;
	vec3 diffuse=diff*matDiffuse;

	//ambient
	float ambientStrength = 1;
	//vec3 ambient = ambientStrength * ambientLightColor;
	vec3 ambient=matAmbient*ambientStrength;

	//specular
	float specularStrength=1.0;
	vec3 viewDir=normalize(viewPos-fragPos);
	vec3 reflectDir=reflect(-lightDir,normal);

	float spec=pow(max(dot(viewDir,reflectDir),0.0),32);
	spec=clamp(spec,0.0,1.0);
	
	if (diff==0)spec=0;

	//vec3 specular=specularStrength*spec*lightColor;
	vec3 specular=spec*matSpecular*specularStrength;
	
	//colorOut=ambient+diffuse+specular;
	colorOut=diffuse*cd+ambient*cd+specular*cd;

	//if (colorOut==)
	
}